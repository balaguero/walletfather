/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace MafiaFactory {
  export type WalletFatherStruct = {
    id: BigNumberish;
    owner: string;
    name: string;
  };

  export type WalletFatherStructOutput = [BigNumber, string, string] & {
    id: BigNumber;
    owner: string;
    name: string;
  };

  export type WalletStruct = {
    id: BigNumberish;
    walletAddress: string;
    privateKey: string;
    parent: BigNumberish;
  };

  export type WalletStructOutput = [BigNumber, string, string, BigNumber] & {
    id: BigNumber;
    walletAddress: string;
    privateKey: string;
    parent: BigNumber;
  };
}

export interface MafiaFactoryInterface extends utils.Interface {
  contractName: "MafiaFactory";
  functions: {
    "createWallet(address,string)": FunctionFragment;
    "createWalletFather(string)": FunctionFragment;
    "getWalletFatherByOwner(address)": FunctionFragment;
    "getWalletFathers()": FunctionFragment;
    "getWallets()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "walletFathers(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createWallet",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createWalletFather",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletFatherByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletFathers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWallets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "walletFathers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWalletFather",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletFatherByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletFathers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWallets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletFathers",
    data: BytesLike
  ): Result;

  events: {
    "NewWallet(uint256,address,string,uint256)": EventFragment;
    "NewWalletFather(uint256,address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWalletFather"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type NewWalletEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  {
    walletId: BigNumber;
    walletAddress: string;
    privateKey: string;
    _walletFatherId: BigNumber;
  }
>;

export type NewWalletEventFilter = TypedEventFilter<NewWalletEvent>;

export type NewWalletFatherEvent = TypedEvent<
  [BigNumber, string, string],
  { walletFatherId: BigNumber; owner: string; name: string }
>;

export type NewWalletFatherEventFilter = TypedEventFilter<NewWalletFatherEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MafiaFactory extends BaseContract {
  contractName: "MafiaFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MafiaFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createWallet(
      _walletAddress: string,
      _privateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createWalletFather(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getWalletFatherByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[MafiaFactory.WalletFatherStructOutput]>;

    getWalletFathers(
      overrides?: CallOverrides
    ): Promise<[MafiaFactory.WalletFatherStructOutput[]]>;

    getWallets(
      overrides?: CallOverrides
    ): Promise<[MafiaFactory.WalletStructOutput[]]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    walletFathers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        id: BigNumber;
        owner: string;
        name: string;
      }
    >;
  };

  createWallet(
    _walletAddress: string,
    _privateKey: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createWalletFather(
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getWalletFatherByOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<MafiaFactory.WalletFatherStructOutput>;

  getWalletFathers(
    overrides?: CallOverrides
  ): Promise<MafiaFactory.WalletFatherStructOutput[]>;

  getWallets(
    overrides?: CallOverrides
  ): Promise<MafiaFactory.WalletStructOutput[]>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  walletFathers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & { id: BigNumber; owner: string; name: string }
  >;

  callStatic: {
    createWallet(
      _walletAddress: string,
      _privateKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createWalletFather(_name: string, overrides?: CallOverrides): Promise<void>;

    getWalletFatherByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<MafiaFactory.WalletFatherStructOutput>;

    getWalletFathers(
      overrides?: CallOverrides
    ): Promise<MafiaFactory.WalletFatherStructOutput[]>;

    getWallets(
      overrides?: CallOverrides
    ): Promise<MafiaFactory.WalletStructOutput[]>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    walletFathers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        id: BigNumber;
        owner: string;
        name: string;
      }
    >;
  };

  filters: {
    "NewWallet(uint256,address,string,uint256)"(
      walletId?: null,
      walletAddress?: null,
      privateKey?: null,
      _walletFatherId?: null
    ): NewWalletEventFilter;
    NewWallet(
      walletId?: null,
      walletAddress?: null,
      privateKey?: null,
      _walletFatherId?: null
    ): NewWalletEventFilter;

    "NewWalletFather(uint256,address,string)"(
      walletFatherId?: null,
      owner?: null,
      name?: null
    ): NewWalletFatherEventFilter;
    NewWalletFather(
      walletFatherId?: null,
      owner?: null,
      name?: null
    ): NewWalletFatherEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    createWallet(
      _walletAddress: string,
      _privateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createWalletFather(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getWalletFatherByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWalletFathers(overrides?: CallOverrides): Promise<BigNumber>;

    getWallets(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    walletFathers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createWallet(
      _walletAddress: string,
      _privateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createWalletFather(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getWalletFatherByOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWalletFathers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWallets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    walletFathers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
